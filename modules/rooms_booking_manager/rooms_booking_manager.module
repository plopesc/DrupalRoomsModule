<?php


/**
 * @file
 * Rooms Booking Manager brings together all the pieces required to find a room and book it
 * - including the DrupalCommerce integration
 */

define ('ROOMS_SIZE_FAILURE', 0);
define ('ROOMS_AVAILABILITY_FAILURE', 1);
define ('ROOMS_NO_ROOMS', 2);
define ('ROOMS_PER_TYPE', 'rooms_per_type');
define ('ROOMS_INDIVIDUAL', 'rooms_individual');
define ('ROOMS_ENQ_CHECKOUT', 'rooms_enq_checkout');
define ('ROOMS_COMMERCE_CHECKOUT', 'rooms_commerce_checkout');

define ('ROOMS_DISPLAY_CHILDREN', 1);
define ('ROOMS_DISPLAY_CHILDREN_NO', 0);

define ('FULL_PAYMENT', 10);
define ('PERCENT_PAYMENT', 11);
define ('FIRST_NIGHT_PAYMENT', 12);

define ('ROOMS_DISPLAY_TYPE_SELECTOR', 1);
define ('ROOMS_DISPLAY_TYPE_SELECTOR_NO', 0);


/**
 * Implements hook_permission()
 */
function rooms_booking_manager_permission() {
  $permissions = array(
    'book units' => array(
      'title' => t('Book units'),
      'description' => t('Allows users to book units.'),
    ),
  );
  return $permissions;
}


/**
 * Implements hook_menu().
 */
function rooms_booking_manager_menu() {
  $items  =  array();

  $items['booking'] = array(
    'title' => 'Create your booking',
    'page callback' => 'rooms_booking_manager_search_availability',
    'file' => 'rooms_booking_manager.availability_search.inc',
    'access arguments' => array('book units'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['booking/%start_date/%end_date'] = array(
    'title' => 'Select your stay',
    'page callback' =>  'rooms_booking_manager_results_page',
    'page arguments' => array(1, 2),
    'access arguments' => array('book units'),
    'type' => MENU_CALLBACK,
  );

  $items['enquiry/%start_date/%end_date'] = array(
    'title' => 'Ask about availability',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rooms_booking_manager_enquiry_page_form', 1, 2),
    'access arguments' => array('book units'),
    'type' => MENU_CALLBACK,
  );

  $items['bookings'] = array(
    'title' => 'Booking cart',
    'page callback' => 'rooms_booking_manager_cart_view',
    'access arguments' => array('access content'),
  );

  $items['enquiry-confirmation'] = array(
    'title' => 'Availability enquiry',
    'page callback' => 'rooms_booking_manager_enquiry_confirmation',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Display 'Booking confirmed' message.
 */
function rooms_booking_manager_enquiry_confirmation() {
  return theme('rooms_booking_enquiry_confirmation', array('message' => t('Booking confirmed')));
}


/**
 * Display the shopping cart form and associated information.
 */
function rooms_booking_manager_cart_view() {
  global $user;

  // Default to displaying an empty message.
  $content = theme('commerce_cart_empty_page');

  // First check to make sure we have a valid order.
  if ($order = commerce_cart_order_load($user->uid)) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Only show the cart form if we found product line items.
    if (commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types()) > 0) {
      drupal_add_css(drupal_get_path('module', 'commerce_cart') . '/theme/commerce_cart.theme.css');

      // Add the form for editing the cart contents.
      $content = commerce_embed_view('booking_cart_form', 'default', array($order->order_id), 'cart');
    }
  }

  return $content;
}


function rooms_booking_manager_enquiry_page_form($form, $form_state, $start_date = 0, $end_date = 0, $unit) {
  $unit_obj = rooms_unit_load($unit);

  $form['room_description'] = array(
    '#type' => 'item',
    '#markup' => t('Unit: @unit_name', array('@unit_name' => $unit_obj->name)),
  );

  $form = rooms_booking_manager_enquiry_form($form, $start_date, $end_date, 2, 0, 1);

  return $form;
}


/**
 * @todo - check that original availability still holds
 * @todo - fix the user ownership of products
 */
function rooms_booking_manager_enquiry_page_form_submit(&$form, &$form_state) {
  if (isset($form_state['values']['enquiry_form'])) {
    room_booking_manager_send_email($form_state);
  }
}


/**
 * Constructs the booking results page following an availability search
 *
 * @param DateTime $start_date
 *   Start date for the search
 * @param DateTime $end_date
 *   End date for the search
 * @param $booking_units
 *   In how many units are we to accommodate them
 */
function rooms_booking_manager_results_page(DateTime $start_date, DateTime $end_date, $booking_units = 1) {
  // validate the dates
  $errors = rooms_check_dates_validity($start_date, $end_date, TRUE);
  // Check validity of the rest of the booking paramenters that are stored in _GET. Again this is to ensure that
  // any direct links were structured appropriately.
  $booking_parameters = rooms_booking_manager_retrieve_booking_parameters($booking_units, $_GET);

  // The array of content to render
  $content = array();

  if (empty($errors) && is_array($booking_parameters)) {

    $content['booking_results'] = 1;

    $unit_types = array();
    $type = '';
    if (isset($_GET['type'])) {
      $type = check_plain($_GET['type']);

      if (rooms_unit_type_load($type) !== FALSE) {
        $unit_types[] = $type;
      }
    }

    // Get all the units - note: we instantiate the Availability Agent using the date format set by the user
    $agent = new AvailabilityAgent($start_date, $end_date, $booking_parameters, $booking_units, variable_get('rooms_valid_availability_states', array(ROOMS_AVAILABLE, ROOMS_ON_REQUEST, ROOMS_UNCONFIRMED_BOOKINGS)), $unit_types);

    $units_per_type = $agent->checkAvailability();

    // Give other modules a chance to change the search results
    drupal_alter('rooms_booking_results', $units_per_type, $start_date, $end_date, $booking_parameters);

    // If we don't have any useful result to show just display a failure message and the search form
    if (($units_per_type == ROOMS_NO_ROOMS) || ($units_per_type == ROOMS_SIZE_FAILURE)) {
      $content['booking_results'] = 0;

      // Use form_load_include() instead of module_load_include() as it
      // ensures that the include file is loaded whenever the form is
      // processed. In contrast to using module_load_include() directly,
      // form_load_include() makes sure the include file is correctly
      // loaded also if the form is cached.
      $form_state = array();
      $form_state['build_info']['args'] = array();
      form_load_include($form_state, 'inc', 'rooms_booking_manager', 'rooms_booking_manager.availability_search');

      // Add css to align date boxes
      drupal_add_css(drupal_get_path('module', 'rooms_booking_manager') . '/css/booking_search.css');

      $booking_search_form = drupal_build_form('rooms_booking_availability_search_form', $form_state);

      // Alter the page title.
      drupal_set_title(t('Create your booking'));

      // Store and clean old messages.
      $old_messages = drupal_get_messages();

      // Create a warning message.
      drupal_set_message(t('Unfortunately no units are available - try different dates if possible.'), 'warning');

      // Show the themed warning message inside our form.
      $content['no_results'] = array(
        '#prefix' => '<div class="no-booking-data">',
        '#markup' => theme('status_messages'),
        '#suffix' => '</div>',
      );

      // Restore old messages.
      $_SESSION['messages'] = $old_messages;

      $content['booking_search_form'] = $booking_search_form;
    }
    elseif (variable_get('rooms_presentation_style', ROOMS_PER_TYPE) == ROOMS_PER_TYPE) {

      // Alter the page title.
      drupal_set_title(t('Select your stay'));

      $content = rooms_booking_manager_present_types($units_per_type, $content, $start_date, $end_date, $booking_parameters, $booking_units, $type);
    }
    elseif (variable_get('rooms_presentation_style', ROOMS_PER_TYPE) == ROOMS_INDIVIDUAL) {

      // Alter the page title.
      drupal_set_title(t('Select a unit'));

      $content = rooms_booking_manager_present_individual_rooms($units_per_type, $content, $start_date, $end_date, $booking_parameters);
    }
  }
  else {
    drupal_set_message(t('Perform a search to get availability information'));
    drupal_goto('booking');
    exit;
  }

  $type = '';
  if (isset($_GET['type'])) {
    $type = check_plain($_GET['type']);
    if ($type == '' || rooms_unit_type_load($type) === FALSE) $type = '';
  }

  $date_format = str_replace('-', '/', variable_get('rooms_date_format', 'd-m-Y'));
  $content['legend'] = rooms_booking_manager_form_info_snippet($date_format, $start_date, $end_date, array());

  $change_search_form = drupal_get_form('rooms_booking_manager_change_search_form', $start_date, $end_date, $booking_parameters, $booking_units, $type);
  $content['change_search'] = $change_search_form;

  $output = theme('rooms_booking_results', $content);
  return $output;
}


function rooms_booking_manager_change_search_form($form, &$form_state, $start_date, $end_date, $booking_parameters, $b_units, $type = '') {

  if (!isset($form['info'])) {
    $form['info'] = array(
      '#type' => 'container',
      '#tree' => FALSE,
      '#attributes' => array('class' => array('rooms-current-search-info')),
    );
  }

  $form['info']['start_date'] = array(
    '#type' => 'hidden',
    '#value' => $start_date->format('Y-m-d'),
  );

  $form['info']['end_date'] = array(
    '#type' => 'hidden',
    '#value' => $end_date->format('Y-m-d'),
  );

  $form['info']['booking_parameters'] = array(
    '#type' => 'hidden',
    '#value' => serialize($booking_parameters),
  );

  $form['info']['b_units'] = array(
    '#type' => 'hidden',
    '#value' => $b_units,
  );

  $form['info']['type'] = array(
    '#type' => 'hidden',
    '#value' => $type,
  );

  $form['info']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Change search'),
  );

  return $form;
}


/**
 * Checks that the booking parameters given are valid. This is mainly used to
 * clean up values that came through the URL and are set in $_GET.
 *
 * @param int $booking_units
 * The amount of booking units
 *
 * @param array $booking_info
 * Booking info supplied
 *
 * @return array - An array of booking parameters
 */
function rooms_booking_manager_retrieve_booking_parameters($booking_units, $booking_info) {
  $booking_units = check_plain($booking_units);

  $booking_parameters = array();

  // Given a certain number of units lets hunt in the $booking_info array for them
  for ($i = 1; $i <= $booking_units; $i++) {
    // If not data has invalidated booking parameters yet
    if ($booking_parameters != 0) {
      if (variable_get('rooms_display_children', ROOMS_DISPLAY_CHILDREN_NO) == ROOMS_DISPLAY_CHILDREN) {
        if ((isset($booking_info['rooms_group_size' . $i])) && (isset($booking_info['rooms_children' . $i]))) {
          $booking_parameters[$i]['adults'] = check_plain($booking_info['rooms_group_size' . $i]);
          $booking_parameters[$i]['children'] = check_plain($booking_info['rooms_children' . $i]);
        } else {
          $booking_parameters = 0;
        }
      }
      else {
        if (isset($booking_info['rooms_group_size' . $i])) {
          $booking_parameters[$i]['adults'] = check_plain($booking_info['rooms_group_size' . $i]);
        } else {
          $booking_parameters = 0;
        }
      }
    }
  }

  // If the booking parameter data was not valid or did not correspond to the number of units
  // invalidate the data
  if (($booking_parameters == 0) || (count($booking_parameters) < $booking_units)) {
    return FALSE;
  }
  else {
    return $booking_parameters;
  }
}


/**
 * Prepares rooms on a per room basis for presentation
 */
function rooms_booking_manager_present_individual_rooms($units_per_type, $content, $start_date, $end_date, $booking_parameters) {
  $content['style'] = ROOMS_INDIVIDUAL;
  foreach ($units_per_type as $type => $price_level) {
    $type_obj = rooms_unit_type_load($type);
    $content[$type] = array(
      '#prefix' => '<h3 class="rooms-search-result__unit-type-name">',
      '#markup' =>  $type_obj->label,
      '#suffix' => '</h3>'
    );

    $group = 0;
    foreach ($price_level as $price => $units) {
      foreach ($units as $unit_id => $unit) {
        // Load the unit and render
        $unit_obj = rooms_unit_load($unit_id);
        $controller = entity_get_controller('rooms_unit');
        $unit_content = $controller->view(array($unit_id => $unit_obj));
        $content['units_per_type'][$type][$price][$unit_id]['unit'] = $unit_content;

        // Add purchase forms - passing through hook_forms to handle multiple forms on the page
        $form = 'book_unit_form_' . $unit_id;

        $group++;
        // Sometimes multiple units are specified, so we'd like
        // to match up each requested room with the according default
        // group size and children list from the availability search.
        // If the value is not available, fall back to the first group,
        // and if nothing is there, fall back to 0;
        if (isset($booking_parameters[$group]['adults'])) {
          $adults = $booking_parameters[$group]['adults'];
        }
        elseif (isset($booking_parameters[1]['adults'])) {
          $adults = $booking_parameters[1]['adults'];
        }
        else {
          $adults = 0;
        }
        if (isset($booking_parameters[$group]['children'])) {
          $children = $booking_parameters[$group]['children'];
        }
        elseif (isset($booking_parameters[1]['children'])) {
          $children = $booking_parameters[1]['children'];
        }
        else {
          $children = 0;
        }

        $content['units_per_type'][$type][$price][$unit_id]['book_unit_form'] = drupal_get_form($form, $unit_obj, $start_date, $end_date, $adults, $unit['state'], $unit['price'], $children);
      }
    }
  }

  return $content;
}


/**
 * Prepares Units on a per type basis.
 */
function rooms_booking_manager_present_types($units_per_type, $content, $start_date, $end_date, $booking_parameters, $b_units, $type = '') {
  // Flag used in tpl
  $content['style'] = ROOMS_PER_TYPE;

  // Stylesheet improves basic booking results layout.
  drupal_add_css(drupal_get_path('module', 'rooms_booking_manager') . '/css/booking_search.css');

  // We build all the content as a form for now
  $content['units_per_type_form'] = drupal_get_form('book_units_per_type_form', $units_per_type, $start_date, $end_date, $booking_parameters, $b_units, $type);

  return $content;
}


/**
 * Implements hook_forms()
 *
 * We use this to be able to present a different purchase button for each choice.
 */
function rooms_booking_manager_forms($form_id, $args) {

  $forms = array();

  if (0 !== strpos($form_id, 'book_unit_form_')) {
    return $forms;
  }

  $forms[$form_id] = array(
    'callback' => 'book_unit_form_builder',
  );

  return $forms;
}


/**
 * The form builder builds the form (where visible is simply the purchase
 * button) for individual bookable units.
 *
 * The builder gets called for each unit from the
 * rooms_booking_manager_present_individual_rooms function above.
 *
 * The available units have already been identified by
 * rooms_booking_manager_results_page.
 */
function book_unit_form_builder($form_id, $form_state, $unit, $start_date, $end_date, $group_size_adults, $status, $price, $children = 0) {

  // Add stylesheets and classes.
  drupal_add_css(drupal_get_path('module', 'rooms_booking_manager') . '/css/booking_search.css');
  $form['#attributes']['class'][] = 'rooms-management-form rooms-book-unit-form';

  $currency_setting = commerce_currency_load(commerce_default_currency());
  $currency_symbol = $currency_setting['symbol'];

  $form['hidden'] = array(
    '#tree' => FALSE,
    '#type' => 'container',
    '#weight' => 999,
    '#attributes' => array('class' => array('rooms-unit-info-hidden')),
  );
  $form['hidden']['unit_id'] = array(
    '#type' => 'hidden',
    '#value' => $unit->unit_id,
  );

  $form['hidden']['status'] = array(
    '#type' => 'hidden',
    '#value' => $status,
  );

  $form['hidden']['start_date'] = array(
    '#type' => 'hidden',
    '#value' => $start_date->format('Y-m-d'),
  );

  $form['hidden']['end_date'] = array(
    '#type' => 'hidden',
    '#value' => $end_date->format('Y-m-d'),
  );

  $form['hidden']['group_size'] = array(
    '#type' => 'hidden',
    '#value' => $group_size_adults,
  );

  $form['price'] = array(
    '#prefix' => '<div class="rooms-search-result__unit-price" id="' . $unit->unit_id . '_price" style="font-weight:bold">',
    '#markup' =>  t('Base price') . ': ' .
      t('@currency_symbol @amount', array( // TODO: replace with a proper currency formatter
        '@currency_symbol' => $currency_symbol,
        '@amount' => $price,
      )),
    '#suffix' => '</div>'
  );

  $form['options'] = array(
    '#tree' => TRUE,
  );

  // Add options checkboxes
  if (isset($unit->rooms_booking_unit_options[LANGUAGE_NONE])) {
    // Convert Price options in Price modifiers
    $price_modifiers = array();

    foreach ($unit->rooms_booking_unit_options[LANGUAGE_NONE] as $option) {
      $form['options'][strtolower(str_replace(array(':', ' '), '_', $option['name']))] = array(
        '#type' => 'checkbox',
        '#title' => $option['name'],
        '#ajax' => array(
          'callback' => 'rooms_booking_manager_options_change_callback',
          'wrapper' => 'unit_' . $unit->unit_id . '_price',
        ),
      );

      // Show quantity field selector if in option quantity is setted
      if (is_numeric($option['quantity'])) {
        if (isset($form_state['values']['options'][strtolower(str_replace(array(':', ' '), '_', $option['name']))])) {
          if ($form_state['values']['options'][strtolower(str_replace(array(':', ' '), '_', $option['name']))] == 1 && $option['quantity'] > 1) {

            $form['options'][strtolower(str_replace(array(':', ' '), '_', $option['name'])) . ':quantity'] = array(
              '#type' => 'select',
              '#title' => t('Quantity'),
              '#options' => range(1, $option['quantity']),
              '#ajax' => array(
                'callback' => 'rooms_booking_manager_options_change_callback',
                'wrapper' => 'unit_' . $unit->unit_id . '_price',
              ),
              '#prefix' => '<div class="rooms-search-result__unit-quantity" id="unit_' . $unit->unit_id . '_' . strtolower(str_replace(array(':', ' '), '_', $option['name'])) . '_quantity">',
              '#suffix' => '</div>',
            );
          }
          else {
            $form['options'][strtolower(str_replace(array(':', ' '), '_', $option['name'])) . ':quantity'] = array(
              '#prefix' => '<div class="rooms-search-result__unit-quantity" id="unit_' . $unit->unit_id . '_' . strtolower(str_replace(array(':', ' '), '_', $option['name'])) . '_quantity">',
              '#suffix' => '</div>',
            );
          }
        }
        else {
          $form['options'][strtolower(str_replace(array(':', ' '), '_', $option['name'])) . ':quantity'] = array(
            '#prefix' => '<div class="rooms-search-result__unit-quantity" id="' . 'unit_' . $unit->unit_id . '_' . strtolower(str_replace(array(':', ' '), '_', $option['name'])) . '_quantity">',
            '#suffix' => '</div>',
          );
        }
      }

      if (isset($form_state['values']['options'][strtolower(str_replace(array(':', ' '), '_', $option['name']))])) {
        $quantity = 1;
        if (isset($form_state['values']['options'][strtolower(str_replace(array(':', ' '), '_', $option['name'])) . ':quantity']) && $operation_list[$option['operation']] != ROOMS_REPLACE) {
          $quantity = $form_state['values']['options'][strtolower(str_replace(array(':', ' '), '_', $option['name'])) . ':quantity'] + 1;
        }

        if ($form_state['values']['options'][strtolower(str_replace(array(':', ' '), '_', $option['name']))] == 1) {
          $price_modifiers[strtolower(str_replace(array(':', ' '), '_', $option['name']))] = array(
            '#type' => ROOMS_DYNAMIC_MODIFIER,
            '#op_type' => $option['operation'],
            '#amount' => $option['value'] * $quantity,
          );
        }
      }
    }
  }

  // Price is calculated as 'Price per person per night'
  if (variable_get('rooms_price_calculation', ROOMS_PER_NIGHT) == ROOMS_PER_PERSON) {
    $form['persons'] = array(
      '#type' => 'select',
      '#title' => t('Guests'),
      '#options' => range($unit->min_sleeps, $unit->max_sleeps),
      '#default_value' => _rooms_booking_get_max_min_default($unit->max_sleeps, $unit->min_sleeps, $group_size_adults),
      '#ajax' => array(
        'callback' => 'rooms_booking_manager_quantity_change_callback',
        'wrapper' => 'unit_' . $unit->unit_id . '_price',
      ),
      '#description' => t('The total number of people staying in this unit (including adults and children).'),
    );

    $max_children = $unit->max_children;
    if (isset($form_state['values']['persons'])) {
      $persons = $form_state['values']['persons'] + $unit->min_sleeps;

      if ($persons < $unit->max_children) {
        $max_children = $persons;
      }
    }

    if ($max_children > $unit->min_children) {
      $form['children'] = array(
        '#type' => 'select',
        '#title' => t('Children'),
        '#options' => range($unit->min_children, $max_children),
        '#default_value' => _rooms_booking_get_max_min_default($max_children, $unit->min_children, $children),
        '#ajax' => array(
          'callback' => 'rooms_booking_manager_children_change_callback',
          'wrapper' => 'unit_' . $unit->unit_id . '_childrensage',
        ),
      );
    }

    $form['childrens_age'] = array(
      '#prefix' => '<div id="unit_' . $unit->unit_id . '_childrensage">',
      '#suffix' => '</div>',
      '#tree' => TRUE,
    );

    if (isset($form_state['values']['children'])) {
      if ($form_state['values']['children'] > 0) {
        for ($t = 1; $t <= $form_state['values']['children']; $t++) {
          $form['childrens_age'][$t] = array(
            '#type' => 'textfield',
            '#title' => t('Age #@num', array('@num' => $t)),
            '#size' => 5,
            '#maxlength' => 5,
            '#ajax' => array(
              'callback' => 'rooms_booking_manager_options_change_callback',
              'wrapper' => 'unit_' . $unit->unit_id . '_price',
            ),
          );
        }
      }
    }
  }

  if (variable_get('rooms_price_calculation', ROOMS_PER_NIGHT) == ROOMS_PER_PERSON || isset($unit->rooms_booking_unit_options[LANGUAGE_NONE])) {
    if (isset($form_state['values']['persons'])) {
      $group_size = $form_state['values']['persons'] + $unit->min_sleeps;
    }
    else {
      $group_size = $unit->max_sleeps;
    }

    $group_size_children = (isset($form_state['values']['children'])) ?
                              $form_state['values']['children'] + $unit->min_children : 0;

    $temp_end_date = clone($end_date);

    $childrens_age = array();
    if (isset($form_state['values']['persons'])) {
      for ($t = 1; $t <= $form_state['values']['children']; $t++) {
        $childrens_age[] = $form_state['values']['childrens_age'][$t];
      }
    }

    $booking_info = array(
      'start_date' => clone($start_date),
      'end_date' => clone($temp_end_date),
      'unit' => $unit,
      'booking_parameters' => array(
        'group_size' => $group_size,
        'group_size_children' => $group_size_children,
        'childrens_age' => $childrens_age,
      )
    );

    // Give other modules a chance to change the price modifiers
    drupal_alter('rooms_price_modifier', $price_modifiers, $booking_info);

    // Apply price modifiers and replace unit price
    $price_calendar = new UnitPricingCalendar($unit->unit_id, $price_modifiers);

    if (isset($form_state['values']['persons'])) {
      $new_price = $price_calendar->calculatePrice($start_date, $end_date,
                      $form_state['values']['persons'] + $unit->min_sleeps,
                      $form_state['values']['children'] + $unit->min_children,
                      $childrens_age);
    }
    else {
      $new_price = $price_calendar->calculatePrice($start_date, $end_date, $unit->max_sleeps);
    }

    $form['new_price'] = array(
      '#prefix' => '<div id="unit_' . $unit->unit_id . '_price" style="font-weight:bold">',
      '#markup' => t('Cost') . ': ' .
        t('@currency_symbol @amount', array( // TODO: replace with a proper currency formatter
          '@currency_symbol'=> $currency_symbol,
          '@amount' => $new_price['full_price']
        )),
      '#suffix' => '</div>',
    );
  }

  // We add the form's #submit array to this button along with the actual submit
  // handler to preserve any submit handlers added by a form callback_wrapper.
  $submit = array();

  if (!empty($form['#submit'])) {
    $submit += $form['#submit'];
  }

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Book This'),
    '#submit' => $submit + array('book_unit_form_submit'),
  );

  // We append the validate handler to #validate in case a form callback_wrapper
  // is used to add validate handlers earlier.
  $form['#validate'][] = 'book_unit_form_validate';
  return $form;
}


function rooms_booking_manager_price_change_callback(&$form, $form_state) {
  return $form['price'];
}


/**
 * Validation for cart booking form
 *
 * @todo Evaluate what to do here
 */
function book_unit_form_validate(&$form, &$form_state) {
}


function book_unit_form_submit(&$form, &$form_state) {

  module_load_include('inc', 'rooms_booking_manager', 'rooms_booking_manager.commerce');

  global $user;

  $unit_id = $form_state['values']['unit_id'];
  $start_date = $form_state['values']['start_date'];
  $end_date = $form_state['values']['end_date'];
  $group_size = $form_state['values']['group_size'];
  $status = $form_state['values']['status'];

  // This is very inefficient right now but we need to create date objects
  // reconvert them back to strings to only recreate them in the Availability Agent
  $sd = start_date_load($start_date);
  $ed = end_date_load($end_date);

  // Let us get the available rooms again and match the order against actual rooms
  $date_format = str_replace('-', '/', variable_get('rooms_date_format', 'd-m-Y'));
  $agent = new AvailabilityAgent($sd, $ed, $group_size);
  $agent->setValidStates(variable_get('rooms_valid_availability_states', array(ROOMS_AVAILABLE, ROOMS_ON_REQUEST)));

  // Let us make sure our bookable unit is still available
  $available_units = $agent->checkAvailabilityForUnit($unit_id);

  if (count($available_units) > 0) {
    if (variable_get('rooms_checkout_style', ROOMS_COMMERCE_CHECKOUT) == ROOMS_COMMERCE_CHECKOUT) {

      $unit = array_pop($available_units);

      $price_modifiers = array();
      if (isset($form_state['values']['options'])) {
        // Convert Price options in Price modifiers
        if (isset($unit['unit']->rooms_booking_unit_options[LANGUAGE_NONE])) {
          foreach ($unit['unit']->rooms_booking_unit_options[LANGUAGE_NONE] as $option) {
            if (isset($form_state['values']['options'][strtolower(str_replace(array(':', ' '), '_', $option['name']))])) {
              if ($form_state['values']['options'][strtolower(str_replace(array(':', ' '), '_', $option['name']))] == 1) {
                $price_modifiers[strtolower(str_replace(array(':', ' '), '_', $option['name']))] = array(
                  '#name' => $option['name'],
                  '#type' => ROOMS_DYNAMIC_MODIFIER,
                  '#op_type' => $option['operation'],
                  '#amount' => $option['value'],
                );
              }
            }
          }
        }
      }

      // Create line item
      $line_item = rooms_create_line_item($unit, $agent, array('adults' => $group_size, 'children' => 0), $price_modifiers);

      // Add line item to cart
      $line_item = commerce_cart_product_add($user->uid, $line_item, FALSE);

      // Send user to cart

      drupal_goto('bookings');

    }
    elseif (variable_get('rooms_checkout_style', ROOMS_COMMERCE_CHECKOUT) == ROOMS_ENQ_CHECKOUT) {

      drupal_goto('enquiry/' . $start_date . '/' . $end_date . '/' . $unit_id);

    }

  }
  else {

    drupal_set_message(t('We apologize for the inconvenience; this unit is no longer available.'));
    drupal_goto('<front>');

  }

}


function book_units_per_type_form($form, $form_state, $units_per_type, $start_date, $end_date, $booking_parameters, $b_units, $type = '') {

  // Add stylesheets and classes.
  drupal_add_css(drupal_get_path('module', 'rooms_booking_manager') . '/css/booking_search.css');
  $form['#attributes']['class'][] = 'rooms-management-form rooms-availability-search-results';

  $date_format = variable_get('rooms_date_format', 'd-m-Y');

  // Check to see if we are rebuilding the form to create an enquiry
  if (($form_state['rebuild']) && (variable_get('rooms_checkout_style', ROOMS_COMMERCE_CHECKOUT) == ROOMS_ENQ_CHECKOUT)) {
    $form = rooms_booking_manager_enquiry_form($form_state['values']['form_data'], $start_date, $end_date, $booking_parameters, $b_units);
    // If not display the per type choices
  }
  else {

    // We add the form's #submit array to this button along with the actual submit
    // handler to preserve any submit handlers added by a form callback_wrapper.
    $submit = array();

    if (!empty($form['#submit'])) {
      $submit += $form['#submit'];
    }

    $form['submit'] = array(
      '#prefix' => '<div class="rooms-current-search-change-search-button form-wrapper">',
      '#suffix' => '</div>',
      '#type' => 'submit',
      '#value' => t('Change search'),
      '#submit' => $submit + array('rooms_booking_manager_change_search_form_submit'),
    );

    if (!isset($form['info_hidden'])) {
      $form['info_hidden'] = array(
        '#type' => 'container',
        '#tree' => FALSE,
        '#weight' => 999,
        '#attributes' => array('class' => array('rooms-current-search-info-hidden')),
      );
    }

    $form['info_hidden']['start_date'] = array(
      '#type' => 'hidden',
      '#value' => $start_date->format('Y-m-d'),
    );

    $form['info_hidden']['end_date'] = array(
      '#type' => 'hidden',
      '#value' => $end_date->format('Y-m-d'),
    );

    $form['info_hidden']['booking_parameters'] = array(
      '#type' => 'hidden',
      '#value' => serialize($booking_parameters),
    );

    $form['info_hidden']['b_units'] = array(
      '#type' => 'hidden',
      '#value' => $b_units,
    );

    $form['info_hidden']['type'] = array(
      '#type' => 'hidden',
      '#value' => $type,
    );


    $form = rooms_booking_manager_form_info_snippet($date_format, $start_date, $end_date, $form);

    drupal_add_js(drupal_get_path('module', 'rooms_booking_manager') . '/js/rooms_booking_manager_button_scroll.js');

    drupal_add_css(drupal_get_path('module', 'rooms_booking_manager') . '/css/button_float.css');

    $currency_setting = commerce_currency_load(commerce_default_currency());
    $currency_symbol = $currency_setting['symbol'];

    $index = 0;

    foreach ($units_per_type as $type => $units_per_price) {
      // Load the type obj and set a title
      $type_obj = rooms_unit_type_load($type);

      $form[$type] = array(
        '#type' => 'container',
        '#tree' => TRUE,
        '#attributes' => array('class' => array('rooms-search-result__unit-type')),
      );

      $form[$type]['title'] = array(
        '#prefix' => '<h3 class="rooms-search-result__unit-type-name">',
        '#markup' => $type_obj->label,
        '#suffix' => '</h3>',
      );

      foreach ($units_per_price as $price => $units) {

        $form[$type][$price] = array();

        $form[$type][$price]['open-markup'] = array(
          '#markup' => '<table class="rooms-search-result__booking-form">',
        );

        // Check if a description source is loaded and if so render
        if (isset($type_obj->data['rooms_description_source'])) {
          if ($type_obj->data['rooms_description_source'] != '') {
            $source_ref = explode(':', $type_obj->data['rooms_description_source']);
            if (isset($source_ref[1])) {
              $node_id = $source_ref[1];

              if (module_exists('translation')) {
                $node_translations = translation_node_get_translations($node_id);
                if (!empty($node_translations)) {
                  $node_id = $node_translations[$GLOBALS['language']->language]->nid;
                }
              }

              $node = node_load($node_id);

              if ($node !== FALSE) {
                $node_view = node_view($node, 'rooms_list');
                $node_html = render($node_view);

                $form[$type][$price]['description'] = array(
                  '#prefix' => '<tr><td class="rooms-search-result__room-description">',
                  '#markup' => $node_html,
                  '#suffix' => '</td><td class="empty"></td><td class="empty"></td></tr>',
                );
              }
            }
          }
        }

        // Element to display price
        $form[$type][$price]['price'] = array(
          '#prefix' => '<tr><td><div class="unit_price" style="font-weight:bold">',
          '#markup' => t('Base price') . ': ' .
            t('@currency_symbol @amount', array( // TODO: replace with a proper currency formatter
          '@currency_symbol' => $currency_symbol,
              '@amount' => $price)),
          '#suffix' => '</div>'
        );
        if (variable_get('rooms_price_calculation', ROOMS_PER_NIGHT) == ROOMS_PER_PERSON) {
          $units_keys = array_keys($units);
          // Calculate the price per person for the period
          $base_price = $units[$units_keys[0]]['price'] / $units[$units_keys[0]]['unit']->max_sleeps;
          $form[$type][$price]['price']['#markup'] = t('Price per person') . ': ' .
            t('@currency_symbol @amount', array( // TODO: replace with a proper currency formatter
            '@currency_symbol' => $currency_symbol,
            '@amount' => $base_price));
        }

        // Element to hold price
        $form[$type][$price]['price_value'] = array(
          '#type' => 'hidden',
          '#value' => $price,
          '#suffix' => '</td>',
        );

        // Dropdown to select quantity
        $options = array();
        for ($i = 0; $i <= count($units); $i++) {
          $options[$i] = $i;
        }
        // ajax wrapper id
        $id = 'rooms_' . $type . '_' . $price;
        $form[$type][$price]['quantity'] = array(
          '#prefix' => '<td class="rooms-search-result__select-units" style="width:15%;">',
          '#title' => t('Units'),
          '#title_display' => 'after',
          '#type' => 'select',
          '#options' => $options,
          '#suffix' => '</td>',
          '#ajax' => array(
            'callback' => 'rooms_booking_manager_quantity_change_callback',
            'wrapper' => $type . '_' . $price . '_container',
          ),
          '#attributes' => array(
            'onchange' => "if (this.value == 0) document.getElementById('" . $id . "').style.display = 'none';
                           else document.getElementById('" . $id . "').style.display = 'table-row';"
          )
        );

        // Show button 'Place Booking' only on the first row
        if ($index == 0) {
          $form[$type][$price]['submit'] = array(
            '#prefix' => '<td class="rooms-search-result__booking_button"  style="width:15%;"><div id="rooms_booking_button">',
            '#type' => 'submit',
            '#value' => t('Place Booking'),
            '#submit' => $submit + array('book_units_per_type_form_submit'),
            '#suffix' => '</div></td></tr>',
          );

          $index++;
        }
        else {
          $form[$type][$price]['submit'] = array(
            '#prefix' => '<td class="rooms-search-result__booking_button" style="width:15%;">',
            '#suffix' => '</td></tr>',
          );
        }

        // Display price options
        $form[$type][$price]['field_start'] = array(
         '#markup' => '<tr style="display:none;" id="rooms_' . $type . '_' . $price . '"><td>',
        );

        $form[$type][$price]['fieldset'] = array(
         '#prefix' => '<div class="form-wrapper" id="' . $type . '_' . $price . '_container">',
         '#type' => 'fieldset',
         '#suffix' => '</div>'
        );

        if (isset($form_state['values'][$type][$price]['quantity'])) {
          $units_keys = array_keys($units);

          for ($c = 1; $c <= $form_state['values'][$type][$price]['quantity']; $c++) {
            $form[$type][$price]['fieldset'][$c]['label']['#markup'] = $type_obj->label . ' ' . $c;

            // Add options checkboxes
            if (isset($units[$units_keys[$c - 1]]['unit']->rooms_booking_unit_options[LANGUAGE_NONE])) {
              foreach ($units[$units_keys[$c - 1]]['unit']->rooms_booking_unit_options[LANGUAGE_NONE] as $option) {
                $form[$type][$price]['fieldset'][$c][strtolower(str_replace(array(':', ' '), '_', $option['name']))] = array(
                  '#type' => 'checkbox',
                  '#title' => $option['name'],
                  '#ajax' => array(
                    'callback' => 'rooms_booking_manager_options_change_callback',
                    'wrapper' => $type . '_' . $price . '_' . $c . '_price',
                  ),
                );

                // Show quantity field selector if an option quantity is setted
                if (is_numeric($option['quantity'])) {
                  if (isset($form_state['values'][$type][$price]['fieldset'][$c][strtolower(str_replace(array(':', ' '), '_', $option['name']))])) {
                    if ($form_state['values'][$type][$price]['fieldset'][$c][strtolower(str_replace(array(':', ' '), '_', $option['name']))] == 1 && $option['quantity'] > 1) {

                      $form[$type][$price]['fieldset'][$c][strtolower(str_replace(array(':', ' '), '_', $option['name'])) . ':quantity'] = array(
                        '#type' => 'select',
                        '#title' => t('Quantity'),
                        '#options' => range(1, $option['quantity']),
                        '#ajax' => array(
                          'callback' => 'rooms_booking_manager_options_change_callback',
                          'wrapper' => $type . '_' . $price . '_' . $c . '_price',
                        ),
                        '#prefix' => '<div id="' . $type . '_' . $price . '_' . $c . '_' . strtolower(str_replace(array(':', ' '), '_', $option['name'])) . '_quantity">',
                        '#suffix' => '</div>',
                      );
                    }
                    else {
                      $form[$type][$price]['fieldset'][$c][strtolower(str_replace(array(':', ' '), '_', $option['name'])) . ':quantity'] = array(
                        '#prefix' => '<div id="' . $type . '_' . $price . '_' . $c . '_' . strtolower(str_replace(array(':', ' '), '_', $option['name'])) . '_quantity">',
                        '#suffix' => '</div>',
                      );
                    }
                  }
                  else {
                    $form[$type][$price]['fieldset'][$c][strtolower(str_replace(array(':', ' '), '_', $option['name'])) . ':quantity'] = array(
                      '#prefix' => '<div id="' . $type . '_' . $price . '_' . $c . '_' . strtolower(str_replace(array(':', ' '), '_', $option['name'])) . '_quantity">',
                      '#suffix' => '</div>',
                    );
                  }
                }
              }
            }

            // Show Guests and Children selectors if price calculation is setted to 'Price per person per night'
            if (variable_get('rooms_price_calculation', ROOMS_PER_NIGHT) == ROOMS_PER_PERSON) {
              $tmp_unit = $units[$units_keys[$c - 1]]['unit'];

              // How many adults were passed into booking
              // parameters sent from availability search?
              if (isset($booking_parameters[$c]['adults'])) {
                $adults = $booking_parameters[$c]['adults'];
              }
              elseif (isset($booking_parameters[1]['adults'])) {
                $adults = $booking_parameters[1]['adults'];
              }
              else {
                $adults = 0;
              }

              $form[$type][$price]['fieldset'][$c]['persons'] = array(
                '#type' => 'select',
                '#title' => t('Guests'),
                '#options' => range($tmp_unit->min_sleeps, $tmp_unit->max_sleeps),
                '#default_value' => _rooms_booking_get_max_min_default($tmp_unit->max_sleeps, $tmp_unit->min_sleeps, $adults),
                '#ajax' => array(
                  'callback' => 'rooms_booking_manager_quantity_change_callback',
                  'wrapper' => $type . '_' . $price . '_container',
                ),
                '#description' => t('The total number of people staying in this unit (including adults and children).'),
              );

              $max_children = $tmp_unit->max_children;
              if (isset($form_state['values'][$type][$price]['fieldset'][$c]['persons'])) {
                $persons = $form_state['values'][$type][$price]['fieldset'][$c]['persons'] + $tmp_unit->min_sleeps;

                if ($persons < $tmp_unit->max_children) {
                  $max_children = $persons;
                }
              }

              if (variable_get('rooms_display_children', ROOMS_DISPLAY_CHILDREN_NO) == ROOMS_DISPLAY_CHILDREN) {
                if ($tmp_unit->max_children > 0) {

                  // How many children were passed into booking
                  // parameters sent from availability search?
                  if (isset($booking_parameters[$c]['children'])) {
                    $children = $booking_parameters[$c]['children'];
                  }
                  elseif (isset($booking_parameters[1]['children'])) {
                    $children = $booking_parameters[1]['children'];
                  }
                  else {
                    $children = 0;
                  }

                  $form[$type][$price]['fieldset'][$c]['children'] = array(
                    '#type' => 'select',
                    '#title' => t('Children'),
                    '#options' => range($tmp_unit->min_children, $max_children),
                    '#default_value' => _rooms_booking_get_max_min_default($max_children, $tmp_unit->min_children, $children),
                    '#ajax' => array(
                      'callback' => 'rooms_booking_manager_children_change_callback',
                      'wrapper' => $type . '_' . $price . '_' . $c . '_childrensage',
                    ),
                  );
                }

                $form[$type][$price]['fieldset'][$c]['childrens_age'] = array(
                  '#prefix' => '<div id="' . $type . '_' . $price . '_' . $c . '_childrensage">',
                  '#suffix' => '</div>',
                );

                $children_number = 0;
                if (isset($form_state['values'][$type][$price]['fieldset'][$c]['children'])) {
                  if ($form_state['values'][$type][$price]['fieldset'][$c]['children'] > 0) {
                    $children_number = $form_state['values'][$type][$price]['fieldset'][$c]['children'];
                  }
                }
                else {
                  $children_number = $tmp_unit->min_children;
                }

                for ($t = 1; $t <= $children_number; $t++) {
                  $form[$type][$price]['fieldset'][$c]['childrens_age'][$t] = array(
                    '#type' => 'select',
                    '#title' => t('Age #@num', array('@num' => $t)),
                    '#options' => range(0, 18),
                    '#ajax' => array(
                    'callback' => 'rooms_booking_manager_options_change_callback',
                      'wrapper' => $type . '_' . $price . '_' . $c . '_price',
                    ),
                  );
                }
              }
            }

            $form[$type][$price]['fieldset'][$c]['price'] = array(
              '#prefix' => '<div id="' . $type . '_' . $price . '_' . $c . '_price">',
              // TODO: replace with a proper currency formatter
              '#markup' =>  t('@currency_symbol @amount', array(
                  '@currency_symbol' => $currency_symbol,
                  '@amount' => $price,
                )),
              '#suffix' => '</div>',
            );


            $price_modifiers = array();
            if (isset($units[$units_keys[$c - 1]]['unit']->rooms_booking_unit_options[LANGUAGE_NONE])) {
              foreach ($units[$units_keys[$c - 1]]['unit']->rooms_booking_unit_options[LANGUAGE_NONE] as $option) {
                if (isset($form_state['values'][$type][$price]['fieldset'][$c][strtolower(str_replace(array(':', ' '), '_', $option['name']))])) {

                  $quantity = 1;
                  if (isset($form_state['values'][$type][$price]['fieldset'][$c][strtolower(str_replace(array(':', ' '), '_', $option['name'])) . ':quantity']) && $operation_list[$option['operation']] != ROOMS_REPLACE) {
                    $quantity = $form_state['values'][$type][$price]['fieldset'][$c][strtolower(str_replace(array(':', ' '), '_', $option['name'])) . ':quantity'] + 1;
                  }

                  if ($form_state['values'][$type][$price]['fieldset'][$c][strtolower(str_replace(array(':', ' '), '_', $option['name']))] == 1) {
                    $price_modifiers[strtolower(str_replace(array(':', ' '), '_', $option['name']))] = array(
                      '#type' => ROOMS_DYNAMIC_MODIFIER,
                      '#op_type' => $option['operation'],
                      '#amount' => $option['value'] * $quantity,
                    );
                  }
                }
              }
            }

            // Price is calculated as 'Price per person per night'
            if (variable_get('rooms_price_calculation', ROOMS_PER_NIGHT) == ROOMS_PER_PERSON) {
              if (isset($form_state['values'][$type][$price]['fieldset'][$c]['persons'])) {
                $group_size = $form_state['values'][$type][$price]['fieldset'][$c]['persons'] + $tmp_unit->min_sleeps;
              }
              else {
                $group_size = $tmp_unit->max_sleeps;
              }

              $group_size_children = $form_state['values'][$type][$price]['fieldset'][$c]['children'] + $tmp_unit->min_children;

              $childrens_age = array();
              if (isset($form_state['values'][$type][$price]['fieldset'][$c]['persons'])) {
                for ($t = 1; $t <= $form_state['values'][$type][$price]['fieldset'][$c]['children']; $t++) {
                  $childrens_age[] = $form_state['values'][$type][$price]['fieldset'][$c]['childrens_age'][$t];
                }
              }

              $booking_info = array(
                'start_date' => clone($start_date),
                'end_date' => clone($end_date),
                'unit' => $units[$units_keys[$c - 1]]['unit'],
                'booking_parameters' => array(
                  'group_size' => $group_size,
                  'group_size_children' => $group_size_children,
                  'childrens_age' => $childrens_age,
                )
              );

              // Give other modules a chance to change the price modifiers
              drupal_alter('rooms_price_modifier', $price_modifiers, $booking_info);

              // Apply price modifiers and replace unit price
              $price_calendar = new UnitPricingCalendar($units[$units_keys[$c - 1]]['unit']->unit_id, $price_modifiers);

              $temp_end_date = clone($end_date);
              $temp_end_date->sub(new DateInterval('P1D'));

              if (isset($form_state['values'][$type][$price]['fieldset'][$c]['persons'])) {
                if (variable_get('rooms_display_children', ROOMS_DISPLAY_CHILDREN_NO) == ROOMS_DISPLAY_CHILDREN) {
                  $new_price = $price_calendar->calculatePrice($start_date, $temp_end_date,
                                  $form_state['values'][$type][$price]['fieldset'][$c]['persons'] + $tmp_unit->min_sleeps,
                                  $form_state['values'][$type][$price]['fieldset'][$c]['children'] + $tmp_unit->min_children,
                                  $childrens_age);
                }
                else {
                  $new_price = $price_calendar->calculatePrice($start_date, $temp_end_date,
                                  $form_state['values'][$type][$price]['fieldset'][$c]['persons'] + $tmp_unit->min_sleeps);
                }
              }
              else {
                $new_price = $price_calendar->calculatePrice($start_date, $temp_end_date, $tmp_unit->max_sleeps);
              }
            }
            // Price is calculated as 'Price per room per night'
            else {
              // Apply price modifiers and replace unit price
              $price_calendar = new UnitPricingCalendar($units[$units_keys[$c - 1]]['unit']->unit_id, $price_modifiers);
              // Let us make sure we remove a day
              $temp_end_date = clone($end_date);
              $temp_end_date->sub(new DateInterval('P1D'));
              $new_price = $price_calendar->calculatePrice($start_date, $temp_end_date);
            }
            $new_price = $new_price['full_price'];

            // Replace old price with the new calculated value
            $form[$type][$price]['fieldset'][$c]['price']['#markup'] =
              // TODO: replace with a proper currency formatter
              t('@currency_symbol @amount', array(
                '@currency_symbol' => $currency_symbol,
                '@amount' => $new_price,
              ));
          }
        }

        $form[$type][$price]['close-markup'] = array(
          '#markup' => '</td></tr></table>',
        );
      }

    }

    $form['actions'] = array(
      '#type' => 'actions',
      '#tree' => FALSE,
      '#weight' => 400,
    );

    $form['actions']['place_booking'] = array(
      '#type' => 'submit',
      '#value' => t('Place Booking'),
      '#submit' => $submit + array('book_units_per_type_form_submit'),
    );

    // We append the validate handler to #validate in case a form callback_wrapper
    // is used to add validate handlers earlier.
    $form['#validate'][] = 'book_units_per_type_form_validate';
  }

  return $form;
}


/**
 * Ajax callback on booking search results page when quantity change
 */
function rooms_booking_manager_quantity_change_callback(&$form, $form_state) {
  list($type, $price) = preg_split('/[\[(.)\]]/', $form_state['triggering_element']['#name']);

  // Show availability of individual units.
  if ($price == '') {
    return $form['new_price'];
  }
  // Show availability on a per-type basis.
  else {
    return $form[$type][$price]['fieldset'];
  }
}


/**
 * Ajax callback on booking search results page when an Options state change
 */
function rooms_booking_manager_options_change_callback(&$form, $form_state) {
  list($type, $price, $tmp, $fieldset, $tmp, $index, $tmp, $option) = preg_split('/[\[(.)\]]/', $form_state['triggering_element']['#name']);

  $commands = array();

  // Show availability of individual units.
  if ($fieldset == '') {
    $option = $price;

    $commands[] = ajax_command_replace('#unit_' . $form['unit_id']['#value'] . '_' . $option . '_quantity', render($form['options'][$option . ':quantity']));
    $commands[] = ajax_command_replace('#unit_' . $form['unit_id']['#value'] . '_price', render($form['new_price']));
  }
  // Show availability on a per-type basis.
  else {
    $commands[] = ajax_command_replace('#' . $type . '_' . $price . '_' . $index . '_' . $option . '_quantity', render($form[$type][$price]['fieldset'][$index][$option . ':quantity']));
    $commands[] = ajax_command_replace('#' . $type . '_' . $price . '_' . $index . '_price', render($form[$type][$price][$fieldset][$index]['price']));
  }

  return array('#type' => 'ajax', '#commands' => $commands);
}


/**
 * Ajax callback on booking search results page when Children selector change
 */
function rooms_booking_manager_children_change_callback(&$form, $form_state) {
  list($type, $price, $tmp, $fieldset, $tmp, $index) = preg_split('/[\[(.)\]]/', $form_state['triggering_element']['#name']);

  $commands = array();

  // Show availability of individual units.
  if ($price == '') {
    $commands[] = ajax_command_replace('#unit_' . $form['unit_id']['#value'] . '_childrensage', render($form['childrens_age']));
    $commands[] = ajax_command_replace('#unit_' . $form['unit_id']['#value'] . '_price', render($form['new_price']));
  }
  // Show availability on a per-type basis.
  else {
    $commands[] = ajax_command_replace('#' . $type . '_' . $price . '_' . $index . '_childrensage', render($form[$type][$price][$fieldset][$index]['childrens_age']));
    $commands[] = ajax_command_replace('#' . $type . '_' . $price . '_' . $index . '_price', render($form[$type][$price][$fieldset][$index]['price']));
  }

  return array('#type' => 'ajax', '#commands' => $commands);
}


function rooms_booking_manager_enquiry_form($form, $start_date, $end_date, $booking_parameters, $b_units) {

  $date_format = variable_get('rooms_date_format', 'd-m-Y');
  $nights = $end_date->diff($start_date);

  $form = rooms_booking_manager_form_info_snippet($date_format, $start_date, $end_date, $form);

  $form['enquiry_form'] = array(
    '#type' => 'hidden',
    '#value' => 'enquiry',
  );

  $form['customer_name'] = array(
    '#title' => t('Name') . ':',
    '#type' => 'textfield',
    '#size' => 50,
    '#required' => TRUE,
  );
  $form['customer_email'] = array(
    '#title' => t('Email') . ':',
    '#type' => 'textfield',
    '#size' => 50,
  );
  $form['customer_add1'] = array(
    '#title' => t('Address Line 1') . ':',
    '#type' => 'textfield',
    '#size' => 80,
  );
  $form['customer_add2'] = array(
    '#title' => t('Address Line 2') . ':',
    '#type' => 'textfield',
    '#size' => 80,
  );
  $form['customer_city'] = array(
    '#title' => t('City') . ':',
    '#type' => 'textfield',
    '#size' => 60,
  );
  $form['customer_state'] = array(
    '#title' => t('State/Province') . ':',
    '#type' => 'textfield',
    '#size' => 60,
  );
  $form['customer_country'] = array(
    '#title' => t('Country') . ':',
    '#type' => 'textfield',
    '#size' => 60,
  );

  $form['comments'] = array(
    '#title' => t('Comments') . ':',
    '#type' => 'textarea',
    '#cols' => 50,
    '#resizable' => TRUE,
    '#rows' => 5,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}


function book_units_per_type_form_validate(&$form, &$form_state) {
  if (isset($form_state['complete form']['comments'])) return;
  if ($form_state['triggering_element']['#value'] == t('Change search')) return;

  foreach ($form_state['values'] as $type) {
    if (is_array($type)) {
      foreach ($type as $price_level) {
        if (isset($price_level['quantity'])) {
          if ($price_level['quantity'] != 0) {
            return;
          }
        }
      }
    }
  }

  form_set_error('', t('Please select a unit in order to continue with booking'));
}


function room_booking_manager_send_email($form_state) {
  $email = variable_get('site_mail', ini_get('sendmail_from'));
  $module = 'rooms_booking_manager';
  $key = 'booking';
  $language = language_default();
  $params = array();
  $from = NULL;
  $send = FALSE;
  $message = drupal_mail($module, $key, $email, $language, $params, $from, $send);

  $message['subject'] = t('Booking');

  $variables = array();

  $booking_request = array();
  foreach ($form_state['values'] as $value_key => $value) {
    $values = explode(':', $value_key);
    if (count($values) == 3 && $values[2] == 'adults') {
      $label = db_select('rooms_unit_type', 'n')->fields('n', array('label'))->condition('type', $values[0], '=')->execute()->fetchField();

      $booking_request[] = '<p>' . $label . ' (' . t('Adults') . ': ' . $value . ' - ' . t('Children') . ': ' . $form_state['values'][$values[0] . ':' . $values[1] . ':children']  . ')</p>';
    }
  }
  if (isset($form_state['complete form']['room_description'])) {
    $booking_request[] = $form_state['complete form']['room_description']['#markup'];
  }

  $variables['customer_name'] = t('Name') . ': ' . $form_state['values']['customer_name'];
  $variables['customer_email'] = t('Email') . ': ' . $form_state['values']['customer_email'];
  $variables['customer_add1'] = t('Address Line 1') . ': ' . $form_state['values']['customer_add1'];
  $variables['customer_add2'] = t('Address Line 2') . ': ' . $form_state['values']['customer_add2'];
  $variables['customer_city'] = t('City') . ': ' . $form_state['values']['customer_city'];
  $variables['customer_state'] = t('State/Province') . ': ' . $form_state['values']['customer_state'];
  $variables['customer_country'] = t('Country') . ': ' . $form_state['values']['customer_country'];
  $variables['comments'] = t('Comments') . ': ' . $form_state['values']['comments'];

  $variables['booking_request'] = $booking_request;

  $message['body'] = array(theme('rooms_booking_email', $variables));

  // Retrieve the responsible implementation for this message.
  $system = drupal_mail_system($module, $key);

  // Format the message body.
  $message = $system->format($message);

  // Send e-mail.
  $message['result'] = $system->mail($message);

  drupal_goto('enquiry-confirmation');
}


/**
 * @todo - check that original availability still holds
 * @todo - fix the user ownership of products
 */
function book_units_per_type_form_submit(&$form, &$form_state) {

  module_load_include('inc', 'rooms_booking_manager', 'rooms_booking_manager.commerce');

  global $user;

  $currency_setting = commerce_currency_load(commerce_default_currency());
  $currency_symbol = $currency_setting['symbol'];

  if (isset($form_state['values']['enquiry_form'])) {
    room_booking_manager_send_email($form_state);
  }

  $start_date = $form_state['values']['start_date'];
  $end_date = $form_state['values']['end_date'];
  $booking_parameters = unserialize($form_state['values']['booking_parameters']);
  $b_units = $form_state['values']['b_units'];

  // Create an "order" based on the form submitted
  $order = array();
  foreach ($form_state['values'] as $type => $value) {
    if (is_array($value)) {
      foreach ($value as $value2) {
        if (isset($value2['quantity'])) {
          $order[$type] = $value;
        }
      }
    }
  }

  // This is very inefficient right now but we need to create date objects
  // reconvert them back to strings to only recreate them in the Availability Agent
  $sd = start_date_load($start_date);
  $ed = end_date_load($end_date);

  // Let us get the available rooms again and match the order against actual rooms
  $date_format = str_replace('-', '/', variable_get('rooms_date_format', 'd-m-Y'));

  $agent = new AvailabilityAgent($sd, $ed, $booking_parameters, $b_units, array());
  $agent->setValidStates(variable_get('rooms_valid_availability_states', array(ROOMS_AVAILABLE, ROOMS_ON_REQUEST)));

  $units_per_type = $agent->checkAvailability();

  $j = 0;

  // We are going to check that this is still true - but let us try and service the order
  foreach ($order as $type => $price_serving) {
    foreach ($price_serving as $price_level => $unit_order) {
      if ($unit_order['quantity'] > 0) {
        for ($i = 1; $i <= $unit_order['quantity']; $i++) {
          $unit = array_shift($units_per_type[$type][$price_level]);

          // If we are using Commerce create the line items and pop in cart
          if (variable_get('rooms_checkout_style', ROOMS_COMMERCE_CHECKOUT) == ROOMS_COMMERCE_CHECKOUT) {

            $childrens_age = array();
            if (isset($form_state['values'][$type][$price_level]['fieldset'][$i]['children'])) {
              for ($t = 1; $t <= $form_state['values'][$type][$price_level]['fieldset'][$i]['children']; $t++) {
                $childrens_age[] = $form_state['values'][$type][$price_level]['fieldset'][$i]['childrens_age'][$t];
              }
            }
            $persons = isset($form_state['values'][$type][$price_level]['fieldset'][$i]['persons']) ?
                      $form_state['values'][$type][$price_level]['fieldset'][$i]['persons'] + $unit['unit']->min_sleeps :
                      $unit['unit']->max_sleeps;
            $children = isset($form_state['values'][$type][$price_level]['fieldset'][$i]['children']) ?
                      $form_state['values'][$type][$price_level]['fieldset'][$i]['children'] + $unit['unit']->min_children : 0;

            // Fill group_size with unit size
            $group_size = array('adults' => $persons, 'children' => $children, 'childrens_age' => $childrens_age);

            // Convert Price options in Price modifiers
            $price_modifiers = array();
            if (isset($unit['unit']->rooms_booking_unit_options[LANGUAGE_NONE])) {
              foreach ($unit['unit']->rooms_booking_unit_options[LANGUAGE_NONE] as $option) {
                if (isset($form_state['values'][$type][$price_level]['fieldset'][$i][strtolower(str_replace(array(':', ' '), '_', $option['name']))])) {
                  if ($form_state['values'][$type][$price_level]['fieldset'][$i][strtolower(str_replace(array(':', ' '), '_', $option['name']))] == 1) {
                    $price_modifiers[strtolower(str_replace(array(':', ' '), '_', $option['name']))] = array(
                      '#name' => $option['name'],
                      '#type' => ROOMS_DYNAMIC_MODIFIER,
                      '#op_type' => $option['operation'],
                      '#amount' => $option['value'],
                    );
                  }
                }
              }
            }

            // Create line item
            $line_item = rooms_create_line_item($unit, $agent, $group_size, $price_modifiers);

            // Add line item to cart
            if (!empty($line_item)) {
              $line_item = commerce_cart_product_add($user->uid, $line_item, FALSE);
            }

            // If we are doing a straight forward enquiry form add some form elements and rebuild form
            // this allows us to preserve state across page loads and avoid repeating code
          }
          elseif (variable_get('rooms_checkout_style', ROOMS_COMMERCE_CHECKOUT) == ROOMS_ENQ_CHECKOUT) {
            $type_obj = rooms_unit_type_load($type);

            $unit_info = $agent->checkAvailabilityForUnit($unit['unit']->unit_id);

            $unit_first = array_pop($unit_info);
            $price = $unit_first['price'];

            $form_data[$unit['unit']->type . ':' . $j] = array(
              '#type' => 'fieldset',
            );

            $form_data[$unit['unit']->type . ':' . $j]['price'] = array(
              '#markup' => $type_obj->label . ' - ' . t('Cost') . ': ' .
                t('@currency_symbol @amount', array( // TODO: replace with a proper currency formatter
                  '@currency_symbol' => $currency_symbol,
                  '@amount' => $price,
                )),
            );

            $form_data[$unit['unit']->type . ':' . $j][$unit['unit']->type . ':' . $j . ':adults'] = array(
              '#prefix' => '<div class="container-inline">',
              '#title' => t('Adults') . ':',
              '#type' => 'textfield',
              '#size' => 3,
            );

            $form_data[$unit['unit']->type . ':' . $j][$unit['unit']->type . ':' . $j . ':children'] = array(
              '#title' => t('Children') . ':',
              '#type' => 'textfield',
              '#size' => 3,
              '#suffix' => '</div></div>'
            );

            // We are storing the partially built form in form_data to use it
            // when rebuilding the results page with the enquiry form
            $form_state['values']['form_data'] = $form_data;
          }

          $j++;
        }
      }
    }
  }

  if (variable_get('rooms_checkout_style', ROOMS_COMMERCE_CHECKOUT) == ROOMS_COMMERCE_CHECKOUT) {
    // Send user to cart
    drupal_goto('bookings');
  }
  elseif (variable_get('rooms_checkout_style', ROOMS_COMMERCE_CHECKOUT) == ROOMS_ENQ_CHECKOUT) {
    $form_state['rebuild'] = TRUE;
  }
}


/**
 * This function redirects the user back to the search box and sets up the values
 * of the search as a convenient way to modify the search.
 */
function rooms_booking_manager_change_search_form_submit(&$form, &$form_state) {
  $booking_parameters = unserialize($form_state['values']['booking_parameters']);

  $b_parameters = array();
  foreach ($booking_parameters as $b_key => $param) {
    foreach ($param as $key => $value) {
      if ($key == 'adults') {
        $b_parameters['rooms_group_size' . $b_key] = $value;
      }
      else {
        $b_parameters['rooms_' . $key . $b_key] = $value;
      }
    }
  }

  drupal_goto('booking', array('query' => array(
    'rooms_start_date' => $form_state['values']['start_date'],
    'rooms_end_date' => $form_state['values']['end_date'],
    'rooms_b_units' => $form_state['values']['b_units'],
    'type' => $form_state['values']['type'],
    $b_parameters,
  )));
}


/**
 * Implements hook_load()
 *
 * Expects to see a date in the form Y-m-d
 *
 * @return a DateTime Object or null if invalid
 */
function start_date_load($start_date) {

  $start_date = check_plain($start_date);

  // Try to create a date time object
  try {
    $sd = new DateTime($start_date);
  } catch (Exception $e) {
    $sd = 0;
  }

  return $sd;
}


/**
 * Implements hook_load()
 *
 * Expects to see a date in the form Y-m-d
 *
 * @return a DateTime Object or null if invalid
 */
function end_date_load($end_date) {

  $end_date = check_plain($end_date);

  // Try to create a date time object
  try {
    $ed = new DateTime($end_date);
  } catch (Exception $e) {
    $ed = 0;
  }

  return $ed;
}


/**
 * Implements hook_theme()
 */
function rooms_booking_manager_theme() {
  return array(
    'rooms_booking_results' => array(
      'template' => 'rooms_booking_results'
    ),
    'rooms_booking_email' => array(
      'template' => 'rooms_booking_email'
    ),
    'rooms_booking_enquiry_confirmation' => array(
      'template' => 'rooms_booking_enquiry_confirmation'
    ),
  );
}


/**
 * Implements hook_commerce_checkout_complete
 */
function rooms_booking_manager_commerce_checkout_complete($order) {
  $profile = commerce_customer_profile_load($order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id']);
  // Cycle through orders looking for booking products
  foreach ($order->commerce_line_items as $lang => $item) {
    foreach ($item as $item_id) {
      $line_item = commerce_line_item_load($item_id['line_item_id']);
      if ($line_item->type == 'rooms_booking') {
        // Create a booking
        $booking_type = variable_get('rooms_booking_type', 'standard_booking');
        $booking = rooms_booking_create(array('type' => $booking_type));
        $booking->created = time();
        $booking->start_date = $line_item->rooms_booking_dates[LANGUAGE_NONE][0]['value'];
        $booking->end_date = $line_item->rooms_booking_dates[LANGUAGE_NONE][0]['value2'];

        // Associate it with this order
        $booking->order_id = $order->order_number;

        $booking->unit_id = $line_item->rooms_booked_unit_id[LANGUAGE_NONE][0]['value'];

        // Load the unit to get its type
        $unit = rooms_unit_load($booking->unit_id);
        $booking->unit_type = $unit->type;
        $booking->customer_id = $order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id'];
        $booking->name = $profile->commerce_customer_address[LANGUAGE_NONE][0]['name_line'];

        if (isset($line_item->rooms_booking_options['und'])) {
          foreach ($line_item->rooms_booking_options['und'] as $option) {
            $option_name = strtolower(str_replace(array(':', ' '), '_', $option['name']));

            $booking->data[$option_name] = 1;
          }
        }

        $booking->data['group_size'] = $line_item->rooms_booking_number_people[LANGUAGE_NONE][0]['value'];
        $booking->data['group_size_children'] = $line_item->rooms_booking_number_people[LANGUAGE_NONE][1]['value'];
        if (isset($line_item->rooms_booking_children_ages[LANGUAGE_NONE])) {
          $booking->data['childrens_age'] = $line_item->rooms_booking_children_ages[LANGUAGE_NONE];
        }

        $booking->price = $line_item->commerce_unit_price[LANGUAGE_NONE][0]['amount'];

        $booking->booking_status = 1;
        $booking->save();

        // Line item 'Entity Reference field' that points to the relevant booking
        $line_item->rooms_booking_reference['und'][0]['target_id'] = $booking->booking_id;
        commerce_line_item_save($line_item);

        // Now let us lock availability
        // First - we get an event id
        $id = rooms_availability_assign_id($booking->booking_id, '1');

        // Set the start and end dates for the booking event

        // They are the same as the booking above but the end date is not the departure date
        // rather it is the last night spend in the room
        $sd = new DateTime($booking->start_date);

        // End date is actually a day less
        $ed = new DateTime($line_item->rooms_booking_dates[LANGUAGE_NONE][0]['value2']);
        $ed->sub(new DateInterval('P1D'));

        // Create a booking event
        $be = new BookingEvent($booking->unit_id, $id, $sd, $ed);

        // Call up the UnitCalednar for this booking unit and add the booking event to it
        $rc = new UnitCalendar($booking->unit_id);
        $responses = $rc->updateCalendar(array($be));

        // If the event addition was succesful lock the event
        if ($responses[$id] == ROOMS_UPDATED) {
          $be->lock();
          drupal_set_message(t('Unit availability has been updated.'));
        }
        else {
          drupal_set_message(t('Unit availability could not be updated.'));
        }
      }
    }
  }
}


function rooms_booking_manager_commerce_order_state_info() {
  $order_states = array();

    $order_states['rooms_unit_booking'] = array(
    'name' => 'rooms_unit_booking',
    'title' => t('Rooms Booking'),
    'description' => t('Orders related to Rooms bookings.'),
    'weight' => 0,
    'default_status' => 'confirmed',
  );

  return $order_states;
}


function rooms_booking_manager_commerce_order_status_info() {
  $order_statuses = array();

  $order_statuses['rooms_unit_confirmed'] = array(
    'name' => 'rooms_unit_confirmed',
    'title' => t('Booking Confirmed'),
    'state' => 'rooms_unit_booking',
  );

  $order_statuses['rooms_unit_canceled'] = array(
    'name' => 'rooms_unit_canceled',
    'title' => t('Booking Canceled'),
    'state' => 'rooms_unit_booking',
  );

  $order_statuses['rooms_unit_pending'] = array(
    'name' => 'rooms_unit_pending',
    'title' => t('Booking Pending'),
    'state' => 'rooms_unit_booking',
  );

  return $order_statuses;
}


function rooms_booking_manager_commerce_checkout_form_cancel_submit($form, &$form_state) {
  $form_state['redirect'] = 'bookings';
}


/**
 * Implements hook_form_alter().
 */
function rooms_booking_manager_form_alter(&$form, &$form_state, $form_id) {

  // Commerce checkout form alters
  if ($form_id == 'commerce_checkout_form_checkout') {
    // Extract the View and display keys from the cart contents pane setting.
    list($view_id, $display_id) = explode('|', variable_get('commerce_cart_contents_pane_view', 'commerce_cart_summary|default'));

    global $user;
    $order = commerce_cart_order_load($user->uid);

    $form['cart_contents']['cart_contents_view'] = array(
      '#markup' => commerce_embed_view('booking_checkout_form', 'booking_checkout_form', array($order->order_id)),
    );

    $form['buttons']['cancel']['#submit'][] = 'rooms_booking_manager_commerce_checkout_form_cancel_submit';
  }

  // Commerce cart view for booking form alters
  if (strpos($form_id, 'views_form_booking_cart_form_') === 0) {
    unset($form['actions']['submit']);
    $form['#action'] = str_replace('cart', 'bookings', $form['#action']);

    // Change any Delete buttons to say Remove.
    if (!empty($form['edit_delete'])) {
      foreach (element_children($form['edit_delete']) as $key) {
        // Load and wrap the line item to have the title in the submit phase.
        if (!empty($form['edit_delete'][$key]['#line_item_id'])) {
          $line_item_id = $form['edit_delete'][$key]['#line_item_id'];
          $form_state['line_items'][$line_item_id] = commerce_line_item_load($line_item_id);

          $form['edit_delete'][$key]['#value'] = t('Remove');
          $form['edit_delete'][$key]['#submit'] = array_merge($form['#submit'], array('commerce_cart_line_item_delete_form_submit'));
        }
      }
    }

    $form['actions']['checkout'] = array(
      '#type' => 'submit',
      '#value' => t('Checkout'),
      '#weight' => 5,
      '#access' => user_access('access checkout'),
      '#submit' => array_merge($form['#submit'], array('commerce_checkout_line_item_views_form_submit')),
    );
  }

  // Adding extra settings to rooms booking settings
  if ($form_id == 'rooms_booking_settings') {
    $form['rooms_presentation_style'] = array(
      '#type' => 'radios',
      '#title' => t('Results Presentation Mode'),
      '#description' => t('Choose whether to display results grouped by unit type or as single units.'),
      '#options' => array(
        ROOMS_PER_TYPE => t('Show availability on a per-type basis.'),
        ROOMS_INDIVIDUAL => t('Show availability of individual units.'),
      ),
      '#default_value' => variable_get('rooms_presentation_style', ROOMS_PER_TYPE),
    );
    $form['rooms_checkout_style'] = array(
      '#type' => 'radios',
      '#title' => t('Checkout presentation style'),
      '#options' => array(
        ROOMS_COMMERCE_CHECKOUT => t('Commerce checkout'),
        ROOMS_ENQ_CHECKOUT => t('Enquiry checkout'),
      ),
      '#default_value' => variable_get('rooms_checkout_style', ROOMS_COMMERCE_CHECKOUT),
    );
    $form['rooms_price_calculation'] = array(
      '#type' => 'radios',
      '#title' => t('Price calculation'),
      '#options' => array(
        ROOMS_PER_NIGHT => t('Per unit per night'),
        ROOMS_PER_PERSON => t('Per person per night'),
      ),
      '#default_value' => variable_get('rooms_price_calculation', ROOMS_PER_NIGHT),
    );

    $booking_types = rooms_booking_get_types();

    $options = array();
    foreach ($booking_types as $type) {
      $options[$type->type] = $type->label;
    }

    $form['rooms_booking_type'] = array(
      '#type' => 'select',
      '#title' => t('Active Booking type'),
      '#options' => $options,
      '#description' => t('The booking type created by Commerce.'),
      '#default_value' => variable_get('rooms_booking_type', 'standard_booking'),
    );

    $form['rooms_manually_booking_create_order'] = array(
      '#type' => 'checkbox',
      '#title' => t('Create orders for manually generated bookings'),
      '#options' => array(
        '0' => '0',
        '1' => '1',
      ),
      '#description' => t('This will create a Commerce order for bookings created via the admin interface of Rooms.'),
      '#default_value' => variable_get('rooms_manually_booking_create_order', '1'),
    );

    $form['rooms_display_children'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display children choice in availability search'),
      '#description' => t('Select whether both group size and children can be shown.'),
      '#default_value' => variable_get('rooms_display_children', ROOMS_DISPLAY_CHILDREN_NO),
    );

    $form['rooms_valid_availability_states'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Valid availability states'),
      '#description' => t('Select the states for which units should show as available in a search.'),
      '#options' => array(
        ROOMS_AVAILABLE => t('Units marked as available.'),
        ROOMS_ON_REQUEST => t('Units marked as available on request.'),
      ),
      '#default_value' => variable_get('rooms_valid_availability_states', array(ROOMS_AVAILABLE, ROOMS_ON_REQUEST)),
    );

    //Commenting out configurations that will we are still experimenting with

    /*$form['rooms_payment_options'] = array(
      '#type' => 'item',
      '#title' => t('Payment options'),
      '#description' => t('Select payment option for booking confirmation.'),
    );

    $form['rooms_payment_options'][FULL_PAYMENT] = array(
      '#type' => 'radio',
      '#title' => t('Full price'),
      '#return_value' => FULL_PAYMENT,
      '#parents' => array('rooms_payment_options'),
      '#default_value' => variable_get('rooms_payment_options', FULL_PAYMENT),
    );

    $form['rooms_payment_options'][PERCENT_PAYMENT] = array(
      '#prefix' => '<div class="container-inline form-item">',
    );

    $form['rooms_payment_options'][PERCENT_PAYMENT]['perc_option'] = array(
      '#type' => 'radio',
      '#title' => t('Percentage of full price') . ':&nbsp;',
      '#return_value' => PERCENT_PAYMENT,
      '#parents' => array('rooms_payment_options'),
      '#default_value' => variable_get('rooms_payment_options', FULL_PAYMENT),
    );

    $form['rooms_payment_options'][PERCENT_PAYMENT]['perc_textfield'] = array(
      '#type' => 'textfield',
      '#size' => 10,
      '#suffix' => '</div>',
      '#default_value' => variable_get('rooms_payment_options_percentual'),
    );

    $form['rooms_payment_options'][FIRST_NIGHT_PAYMENT] = array(
      '#type' => 'radio',
      '#title' => t('First night'),
      '#return_value' => FIRST_NIGHT_PAYMENT,
      '#parents' => array('rooms_payment_options'),
      '#default_value' => variable_get('rooms_payment_options', FULL_PAYMENT),
    );

    drupal_add_js(drupal_get_path('module', 'rooms_booking_manager') . '/js/rooms_booking_manager_checked.js');*/

    $form['rooms_booking_manager_type_selector'] = array(
      '#type' => 'checkbox',
      '#description' => t('Display a drop-down list of unit types for filtering the availability search.'),
      '#title' => t('Display unit type selector in availability search'),
      '#default_value' => variable_get('rooms_booking_manager_type_selector', ROOMS_DISPLAY_TYPE_SELECTOR_NO),
    );

    $form['rooms_date_format'] = array(
      '#type' => 'item',
      '#title' => t('Rooms PHP Date Format'),
      '#description' => t("A custom date format used throughout the Rooms admin interface. Define a php date format string like 'm-d-Y' (see <a href=\"@link\">http://php.net/date</a> for more details).", array('@link' => 'http://php.net/date')),
    );

    $form['rooms_date_format']['date_format'] = array(
      '#type' => 'textfield',
      '#size' => 12,
      '#prefix' => '<div class="container-inline form-item">' . t('Date format') . ': &nbsp;',
      '#suffix' => '</div>',
      '#default_value' => variable_get('rooms_date_format', 'd-m-Y'),
    );

    $form['#submit'][] = 'rooms_booking_manager_settings_form_submit';
  }

  // Remove the option to add a booking line item on the administrative "add
  // order" page. (/admin/commerce/orders/add)
  if ($form_id == 'commerce_order_ui_order_form') {
    $language = $form['commerce_line_items']['#language'];
    unset($form['commerce_line_items'][$language]['actions']['line_item_type']['#options']['rooms_booking']);
  }
}


function rooms_booking_manager_settings_form_submit($form, &$form_state) {
  /*if($form_state['values']['rooms_payment_options'] == PERCENT_PAYMENT) {
    variable_set('rooms_payment_options_percentual', $form_state['values']['perc_textfield']);
  }
  else {
    variable_set('rooms_payment_options_percentual', '');
  }*/

  variable_set('rooms_date_format', $form_state['values']['date_format']);
}


/**
 * Implements hook_rules_action_info()
 *
 * Rules to set Order Status
 */
function rooms_booking_manager_rules_action_info() {
  $actions = array();

  $actions['rooms_booking_cancel_order'] = array(
    'label' => t('Cancel the booking related to an order'),
    'parameter' => array(
      'commerce_order' => array(
        'type' => 'commerce_order',
        'label' => t('Order from which to extract info for booking cancellation'),
      ),
    ),
    'group' => t('Rooms'),
    'callbacks' => array(
      'execute' => 'rooms_booking_cancel_order_booking',
    ),
  );

  $actions['rooms_booking_manager_price_apply'] = array(
    'label' => t('Apply price to a booking line item'),
    'parameter' => array(
      'commerce_line_item' => array(
        'type' => 'commerce_line_item',
        'label' => t('Line item'),
      ),
    ),
    'group' => t('Rooms'),
    'callbacks' => array(
      'execute' => 'rooms_booking_manager_price_apply',
    ),
  );

  return $actions;
}


function rooms_booking_cancel_order_booking() {

}


function rooms_booking_manager_price_apply($line_item, $name) {
  if ($line_item->type == 'rooms_booking') {
    $amount = $line_item->commerce_unit_price[LANGUAGE_NONE][0]['amount'];

    $start_date = new DateTime($line_item->rooms_booking_dates[LANGUAGE_NONE][0]['value']);
    $end_date = new DateTime($line_item->rooms_booking_dates[LANGUAGE_NONE][0]['value2']);

    $unit_id = $line_item->rooms_booked_unit_id[LANGUAGE_NONE][0]['value'];
    $unit = rooms_unit_load($unit_id);

    // First set up price modifiers
    $price_options = isset($line_item->rooms_booking_options[LANGUAGE_NONE]) ? $line_item->rooms_booking_options[LANGUAGE_NONE] : array();

    // Convert Price options in Price modifiers
    foreach ($price_options as $option) {
      $price_modifiers[strtolower(str_replace(array(':', ' '), '_', $option['name']))] = array(
        '#name' => $option['name'],
        '#type' => ROOMS_DYNAMIC_MODIFIER,
        '#op_type' => $option['operation'],
        '#amount' => $option['value'],
      );
    }

    $adults = $line_item->rooms_booking_number_people[LANGUAGE_NONE][0]['value'];
    $children = $line_item->rooms_booking_number_people[LANGUAGE_NONE][1]['value'];
    $childrens_age = (isset($line_item->rooms_booking_children_ages[LANGUAGE_NONE])) ?
                      $line_item->rooms_booking_children_ages[LANGUAGE_NONE] : array();

    $booking_info = array(
      'start_date' => clone($start_date),
      'end_date' => clone($end_date),
      'unit' => $unit,
      'booking_parameters' => array(
        'group_size' => $adults,
        'group_size_children' => $children,
        'childrens_age' => $childrens_age,
      )
    );

    // Give other modules a chance to change the price modifiers
    drupal_alter('rooms_price_modifier', $price_modifiers, $booking_info);

    $price_calendar = new UnitPricingCalendar($unit->unit_id, $price_modifiers);

    $temp_end_date = clone($end_date);
    $temp_end_date->sub(new DateInterval('P1D'));

    $price = $price_calendar->calculatePrice($start_date, $temp_end_date, $adults, $children, $childrens_age);

    $full_price = $price['full_price'] * 100;

    $line_item->commerce_unit_price[LANGUAGE_NONE][0]['amount'] = $full_price;
    $line_item->commerce_unit_price[LANGUAGE_NONE][0]['currency_code'] = commerce_default_currency();

    foreach ($line_item->commerce_unit_price[LANGUAGE_NONE][0]['data']['components'] as $key => $component) {
      $line_item->commerce_unit_price[LANGUAGE_NONE][0]['data']['components'][$key]['price']['amount'] = $full_price / $amount * $component['price']['amount'];
    }
  }
}


/**
 * Implements hook_default_rules_configuration().
 */
function rooms_booking_manager_default_rules_configuration() {
  $rules = array();

  $rule = rules_reaction_rule();
  $rule->label = 'Rooms';
  $rule->active = TRUE;
  $rule->weight = -100;

  $rule
    ->event('commerce_product_calculate_sell_price')
    ->action('rooms_booking_manager_price_apply', array(
        'commerce_line_item:select' => 'commerce-line-item',
      ));

  $rules['rooms'] = $rule;

  return $rules;
}


/**
 * Implements hook_block_info()
 */
function rooms_booking_manager_block_info() {
  $blocks = array();

  $blocks['rooms_availability_search'] = array(
    'info' => t('Availability Search'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}


/**
 * Implements hook_block_view()
 */
function rooms_booking_manager_block_view($block_name = '') {
  if ($block_name == 'rooms_availability_search') {

    // Add css to align date boxes
    drupal_add_css(drupal_get_path('module', 'rooms_booking_manager') . '/css/booking_search.css');

    // Use form_load_include() instead of module_load_include() as it ensures that the include file is loaded whenever the
    // form is processed. In contrast to using module_load_include() directly, form_load_include() makes sure the
    // include file is correctly loaded also if the form is cached.
    $form_state = array();
    $form_state['build_info']['args'] = array();
    form_load_include($form_state, 'inc', 'rooms_booking_manager', 'rooms_booking_manager.availability_search');

    $form = drupal_build_form('rooms_booking_availability_search_form', $form_state);

    $block = array(
      'subject' => t('Availability Search'),
      'content' => $form,
    );
    return $block;
  }
}


/**
 * Implements hook_commerce_line_item_type_info().
 */
function rooms_booking_manager_commerce_line_item_type_info() {
  return array(
    'rooms_booking' => array(
      'name' => t('Rooms Booking'),
      'description' => t('Represents a booking of a Rooms product.'),
      'product' => TRUE,
      'add_form_submit_value' => t('Add product'),
      'base' => 'rooms_booking_manager_line_item',
    ),
  );
}


/**
 * Ensures the booking line item type contains a product reference field and
 * all other rooms fields required for a booking.
 */
function rooms_booking_manager_line_item_configuration($line_item_type) {
  $type = $line_item_type['type'];

  // Get the info about the fields and instances we need to create
  module_load_include('inc', 'rooms_booking_manager', 'includes/rooms_booking_manager.fields');
  $field_data = _rooms_booking_manager_line_item_type_fields();

  // Create the product reference field for the line item type.
  commerce_product_line_item_configuration($line_item_type);

  // For each field, check whether it already exists create it if it doesn't
  foreach ($field_data['fields'] as $field_name => $field_info) {
    $field = field_info_field($field_name);
    $instance = field_info_instance('commerce_line_item', $field_name, $type);

    if (empty($field)) {
      field_create_field($field_data['fields'][$field_name]);
    }
    if (empty($instance)) {
      field_create_instance($field_data['instances'][$field_name]);
    }
  }
}


/**
 * Implements hook_line_item_title()
 * Returns the title of a line item based on its type.
 *
 * @param $line_item
 *   The line item object whose title should be returned.
 *
 * @return
 *   The type-dependent title of the line item.
 */
function rooms_booking_manager_line_item_title($line_item) {
  // Use the line item's label for the title.
  return ($line_item->line_item_label);
}


/**
 * Implements hook_commerce_product_type_info().
 */
function rooms_booking_manager_commerce_product_type_info() {
  return array(
    'rooms_product' => array(
      'type' => 'rooms_product',
      'name' => t('Rooms product'),
      'description' => t('Products that are bookable with Rooms.'),
      'revision' => '1',
    ),
  );
}


/**
 * Implements hook_enable().
 *
 * Creates a product that can be referenced from line items.
 */
function rooms_booking_manager_enable() {
  // Reset product types cache to have our rooms_product available
  commerce_product_types_reset();
  commerce_product_configure_product_type('rooms_product');

  $types = commerce_product_types();
  if (isset($types['rooms_product']) && !empty($types['rooms_product'])) {
    $previous_product_id = variable_get('rooms_booking_manager_booking_product_id', 0);
    if (!($previous_product_id && commerce_product_load($previous_product_id))) {
      $product = commerce_product_new('rooms_product');
      $product->sku = 'ROOMS-BASIC-BOOKING';
      $product->title = t('Rooms Basic Booking');
      // We will change the price later, but for now set the price to 100 (=$1)
      // to give tax module something to work with
      $product->commerce_price[LANGUAGE_NONE][0]['amount'] = 100;
      $product->commerce_price[LANGUAGE_NONE][0]['currency_code'] = commerce_default_currency();

      commerce_product_save($product);
      variable_set('rooms_booking_manager_booking_product_id', $product->product_id);
    }
  }
  else {
    drupal_set_message(t('There was an error creating the rooms product to handle bookings.'));
  }
}


/**
 * Implements hook_views_api().
 */
function rooms_booking_manager_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'rooms_booking_manager') . '/views',
  );
}


/**
 * Helper function to provide a portion of a form that we use in more places.
 */
function rooms_booking_manager_form_info_snippet($date_format, $start_date, $end_date, $form) {
  $nights = $end_date->diff($start_date)->days;

  $form_tmp['info'] = array(
    '#type' => 'container',
    '#tree' => FALSE,
    '#attributes' => array('class' => array('rooms-current-search-info')),
  );
  $form_tmp['info']['arrival_date'] = array(
    '#type' => 'item',
    '#title' => t('Arrival Date'),
    '#markup' => '<span class="info">' . check_plain($start_date->format($date_format)) . '</span>',
  );
  $form_tmp['info']['departure_date'] = array(
    '#type' => 'item',
    '#title' => t('Departure Date'),
    '#markup' => '<span class="info">' . check_plain($end_date->format($date_format)) . '</span>',
  );
  $form_tmp['info']['nights'] = array(
    '#type' => 'item',
    '#title' => t('Nights'),
    '#markup' => '<span class="info">' . check_plain($nights) . '</span>',
  );

  $form = array_merge($form_tmp, $form);

  return $form;
}

/**
 * Given a test number, this helper function returns the desired value based
 * on a max and min range.  The return has been normalized to zero, due to
 * how the range() function works in combination with unkeyed select options.
 *
 * @param  integer $max  the maximum number in the range
 * @param  integer $min  the minimum number in the range
 * @param  integer $test the number to test.
 * @return integer       the default value to use in a select list range.
 */
function _rooms_booking_get_max_min_default($max = 0, $min = 0, $test = 0) {
      // If the number of children is too big, set the default number of
      // children to the max.
      if ($test > $max) {
        // Because the range is keyed to always start with zero,
        // we have to calculate the value in the following way:
        return $max - $min;
      }
      // If the group size is fewer than the minimum required to purchase, set
      // the default to the minimum (i.e. "0" the first value in the list)
      elseif ($test < $min) {
        return 0;
      }
      // Otherwise, the group size is in the correct range, so set the value
      // to the group size.
      else {
        return  $test - $min;
      }
}
