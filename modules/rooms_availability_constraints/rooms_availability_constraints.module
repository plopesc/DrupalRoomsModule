<?php

module_load_include('inc', 'rooms_availability_constraints', 'rooms_availability_constraints.field');

define('ROOMS_AVAILABILITY_CONSTRAINT_MUST_START', 'must');
define('ROOMS_AVAILABILITY_CONSTRAINT_IF_STARTS', 'if');

/**
 * Implements hook_form_FORM_ID_alter().
 * FORM_ID = rooms_unit_type_form
 */
function rooms_availability_constraints_form_rooms_unit_type_form_alter(&$form, &$form_state, $form_id) {
  $unit_type = $form_state['rooms_unit_type'];
  // Unit availability information for administrators.
  $form['availability_constraints'] = array(
    '#type' => 'fieldset',
    '#group' => 'additional_settings',
    '#title' => t('Status'),
    '#tree' => FALSE,
    '#weight' => 80,
    '#attributes' => array(
      'class' => array('unit-form-availability '),
    ),
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'rooms_unit') . '/js/rooms_unit.js'),
    ),
  );

  $form['availability_constraints']['rooms_availability_range_unit'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Rooms availability range constraints at unit level'),
    '#default_value' => variable_get('rooms_availability_constraints_unit_' . $unit_type->type, 0),
    '#description' => t('If you disable this feature, all the stored data will be removed')
  );

  $form['availability_constraints']['rooms_availability_range_type'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Rooms availability range constraints at unit type level'),
    '#default_value' => variable_get('rooms_availability_constraints_type_' . $unit_type->type, 0),
    '#description' => t('If you disable this feature, all the stored data will be removed')
  );

  if (variable_get('rooms_availability_constraints_type_' . $unit_type->type, 0) == 0) {
    $form['rooms_constraints_range']['#access'] = FALSE;
  }

  $form['#submit'][] = 'rooms_availability_constraints_rooms_unit_type_form_submit';
}

/**
 * Submit handler for rooms_unit_type_form.
 */
function rooms_availability_constraints_rooms_unit_type_form_submit($form, &$form_state) {
  $unit_type = $form_state['rooms_unit_type'];

  if (variable_get('rooms_availability_constraints_unit_' . $unit_type->type, 0) == 0
    && $form_state['values']['rooms_availability_range_unit'] == 1) {
    rooms_availability_constraints_add_availability_range_field('rooms_unit', $unit_type->type);
  }
  elseif (variable_get('rooms_availability_constraints_unit_' . $unit_type->type, 0) == 1
    && $form_state['values']['rooms_availability_range_unit'] == 0) {
    field_delete_instance(array(
      'field_name' => 'rooms_constraints_range',
      'entity_type' => 'rooms_unit',
      'bundle' => $unit_type->type,
    ));
  }

  if (variable_get('rooms_availability_constraints_type_' . $unit_type->type, 0) == 1
    && $form_state['values']['rooms_availability_range_type'] == 0) {
    $unit_type->rooms_constraints_range[LANGUAGE_NONE] = array();
    entity_save('rooms_unit_type', $unit_type);
  }

  variable_set('rooms_availability_constraints_unit_' . $unit_type->type, $form_state['values']['rooms_availability_range_unit']);
  variable_set('rooms_availability_constraints_type_' . $unit_type->type, $form_state['values']['rooms_availability_range_type']);
}

/**
 * Adds the default Availability range field to certain bundle.
 */
function rooms_availability_constraints_add_availability_range_field($entity_type, $bundle) {
  // Create field ('rooms_constraint_range') if not exist
  if (field_read_field('rooms_constraints_range') === FALSE) {
    $field = array(
      'field_name' => 'rooms_constraints_range',
      'type' => 'rooms_availability_constraints_range',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    );
    field_create_field($field);
  }

  field_cache_clear();

  if (field_read_instance($entity_type, 'rooms_constraints_range', $bundle) === FALSE) {
    // Create the instance on the bundle.
    $instance = array(
      'field_name' => 'rooms_constraints_range',
      'entity_type' => $entity_type,
      'label' => 'Availability ranges',
      'bundle' => $bundle,
      // If you don't set the "required" property then the field wont be required by default.
      'required' => FALSE,
      'widget' => array(
        'type' => 'rooms_availability_constraints_range',
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Implements hook_entity_delete().
 */
function rooms_availability_constraints_entity_delete($entity, $type) {
  if ($type == 'rooms_unit_type') {
    variable_del('rooms_availability_constraints_unit_' . $entity->type);
    variable_del('rooms_availability_constraints_type_' . $entity->type);
  }
}

/**
 * Implements hook_rooms_booking_availabilityagent_filter().
 */
function rooms_availability_constraints_rooms_booking_availabilityagent_filter() {
  return array(
    'availability_agent_range_filter' => array(
      'label' => t('Availability range'),
      'handler' => array(
        'class' => 'AvailabilityAgentDurationFilter',
      )
    ),
  );
}

/**
 * Implements hook_element_info().
 */
function rooms_availability_constraints_element_info() {
  $elements = array();
  $elements['rooms_availability_range'] = array(
    '#input' => TRUE,
    '#process' => array('rooms_availability_range_process'),
  );
  return $elements;
}

function rooms_availability_range_process($element, $form_state, $complete_form) {
  $range = rooms_date_range_fields();

  $always_id = drupal_html_id('rooms-constraints-range-always');
  $element['always'] = array(
    '#type' =>  'checkbox',
    '#title' => t('Always'),
    '#default_value' =>  isset($element['#value']['always']) ? $element['#value']['always'] : '',
    '#attributes' => array(
      'id' => $always_id,
    )
  );

  $element['start_date'] = array(
    '#required' => FALSE,
    '#default_value' => (isset($element['#value']['start_date']) && !isset($element['#value']['always'])) ? $element['#value']['start_date'] : '',
    '#states' => array(
      'visible' => array(
        ':input[id="' . $always_id . '"]' => array('checked' => FALSE),
      ),
    ),
  ) + $range['rooms_start_date'];

  $element['end_date'] = array(
    '#required' => FALSE,
    '#default_value' => (isset($element['#value']['end_date']) && !isset($element['#value']['always'])) ? $element['#value']['end_date'] : '',
    '#states' => array(
      'visible' => array(
        ':input[id="' . $always_id . '"]' => array('checked' => FALSE),
      ),
    ),
  ) + $range['rooms_end_date'];

  $element['constraint_type'] = array(
    '#type' => 'select',
    '#options' => array(
      ROOMS_AVAILABILITY_CONSTRAINT_IF_STARTS => t('If booking starts on'),
      ROOMS_AVAILABILITY_CONSTRAINT_MUST_START => t('booking must start on'),
    ),
    '#default_value' =>  isset($element['#value']['constraint_type']) ? $element['#value']['constraint_type'] : '',
    '#prefix' => '<div class="container-inline">',
  );

  $element['start_day'] = array(
    '#type' => 'select',
    '#options' => array(1 => t('Monday'), 2 => t('Tuesday'), 3 => t('Wednesday'), 4 => t('Thursday'), 5 => t('Friday'), 6 => t('Saturday'),7 => t('Sunday')),
    '#empty_option' => t('No constraint'),
    '#default_value' => isset($element['#value']['start_day']) ? $element['#value']['start_day'] : '',
    '#suffix' => '</div>'
  );

  $element['minimum_stay'] = array(
    '#type' => 'textfield',
    '#title' => t('The minimum allowed stay is:'),
    '#size' => 2,
    '#default_value' => isset($element['#value']['minimum_stay']) ? $element['#value']['minimum_stay'] : '',
    '#description' => t('Enter an integer, where 0 or empty means no constraint'),
  );

  $element['maximum_stay'] = array(
    '#type' => 'textfield',
    '#title' => t('The maximum allowed stay is:'),
    '#size' => 2,
    '#default_value' => isset($element['#value']['maximum_stay']) ? $element['#value']['maximum_stay'] : '',
    '#description' => t('Enter an integer, where 0 or empty means no constraint'),
  );

  $element['#element_validate'][] = 'rooms_availability_range_validate';

  return $element;
}

/**
 * VAlidaion callback for rooms_availability_range form element.
 * @param $element
 * @param $form_state
 */
function rooms_availability_range_validate($element, &$form_state) {
  $columns = array('minimum_stay', 'maximum_stay', 'start_day');
  foreach ($columns as $column) {
    if (empty($element['#value'][$column])) {
      form_set_value($element[$column], NULL, $form_state);
    }
  }

  if (isset($element['#value']['always'])) {
    form_set_value($element['start_date'], '1970-01-01', $form_state);
    form_set_value($element['end_date'], '2999-12-31', $form_state);
  }
}
